<<<<<<< HEAD
#include <iostream>
#include <math.h>
#include <mpi.h>

int main(int argc, char* argv[])
{
	int proc_rank, proc_num;
	const int buf_size = 100;
	char buf[buf_size];
	MPI_Status st;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &proc_rank);
	MPI_Comm_size(MPI_COMM_WORLD, &proc_num);
	if (proc_rank == 0)
	{
		for (int i = 1; i < proc_num; i++)
		{
				MPI_Recv(buf, buf_size, MPI_CHAR, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &st);
				printf_s("%s\n", buf);	
		}
		printf_s("\n%d processes.\n", proc_num);
	}
	else
	{
		if (proc_rank % 2 == 0)
		{
			sprintf_s(buf, "%d FIRST", proc_rank);
		}
		else
		{
			sprintf_s(buf, "%d SECOND", proc_rank);
		}
		MPI_Send(buf, buf_size, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
	}
	MPI_Finalize();
=======
#include <iostream>
#include <math.h>
#include <mpi.h>

int main(int argc, char* argv[])
{
	int proc_rank, proc_num;
	const int buf_size = 100;
	char buf[buf_size];
	MPI_Status st;
	MPI_Init(&argc, &argv);
	MPI_Comm_rank(MPI_COMM_WORLD, &proc_rank);
	MPI_Comm_size(MPI_COMM_WORLD, &proc_num);
	if (proc_rank == 0)
	{
		for (int i = 1; i < proc_num; i++)
		{
				MPI_Recv(buf, buf_size, MPI_CHAR, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, &st);
				printf_s("%s\n", buf);	
		}
		printf_s("\n%d processes.\n", proc_num);
	}
	else
	{
		if (proc_rank % 2 == 0)
		{
			sprintf_s(buf, "%d FIRST", proc_rank);
		}
		else
		{
			sprintf_s(buf, "%d SECOND", proc_rank);
		}
		MPI_Send(buf, buf_size, MPI_CHAR, 0, 0, MPI_COMM_WORLD);
	}
	MPI_Finalize();
>>>>>>> ad22ee082dac6ece8d23d5999a86f8d8c86438df
}