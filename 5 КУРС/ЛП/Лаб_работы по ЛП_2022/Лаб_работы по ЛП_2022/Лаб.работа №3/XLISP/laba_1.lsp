;           Вариант 3
;Средствами языка XLISP создать программу, которая решает ребус
;       СТОЛЫ+СТОЛЫ=МЕБЕЛЬ.
;Подставить вместо букв цифры таким образом, чтобы выполнилось условие.
;Программа должна найти все решения.

( defun main()
  (cls)
  (defconstant down_rng 50000)    ;нижняя граница
  (defconstant up_rng   99999)      ;верхняя граница
  (princ "Ребус:\n")
  (princ " СТОЛЫ\n")
  (princ "   +\n")
  (princ " СТОЛЫ\n")
  (princ "   =\n")
  (princ "МЕБЕЛЬ\n")
  (princ "Промежуток: ")
  (princ down_rng)
  (princ " .. ")
  (princ up_rng)
  (princ "\nПоиск решений...\n")
  (setq x down_rng)
  (loop
    (setq sum_x (+ x x))
    (setq st1 (truncate x 10000))
    (setq st2 (truncate (- x (* st1 10000)) 1000))
    (setq st3 (truncate (- (- x (* st1 10000)) (* st2 1000)) 100))
    (setq st4 (truncate (- (- (- x (* st1 10000)) (* st2 1000)) (* st3 100)) 10))
    (setq st5 (truncate (- (- (- (- x (* st1 10000)) (* st2 1000)) (* st3 100)) (* st4 10)) 1))

    ;список СТОЛЫ
    (setq stols (list  st1 st2 st3 st4 st5))

    (setq meb1 (truncate sum_x 100000))
    (setq meb2 (truncate (- sum_x (* meb1 100000)) 10000))
    (setq meb3 (truncate (- (- sum_x (* meb1 100000)) (* meb2 10000)) 1000))
    (setq meb4 (truncate (- (- (- sum_x (* meb1 100000)) (* meb2 10000)) (* meb3 1000)) 100))
    (setq meb5 (truncate (- (- (- (- sum_x (* meb1 100000)) (* meb2 10000)) (* meb3 1000)) (* meb4 100)) 10))
    (setq meb6 (truncate (- (- (- (- (- sum_x (* meb1 100000)) (* meb2 10000)) (* meb3 1000)) (* meb4 100)) (* meb5 10)) 1))

    ;списoк МЕБЕЛЬ
    (setq mebels (list  meb1 meb2 meb3 meb4 meb5 meb6))

        (when (= (elt stols 3) (elt mebels 4))
        (when (= (elt mebels 1) (elt mebels 3))
        (when (/= (elt stols 0) (elt stols 1))
        (when (/= (elt stols 0) (elt stols 2))
        (when (/= (elt stols 0) (elt stols 3))
        (when (/= (elt stols 0) (elt stols 4))
        (when (/= (elt stols 1) (elt stols 0))
        (when (/= (elt stols 1) (elt stols 2))
        (when (/= (elt stols 1) (elt stols 3))
        (when (/= (elt stols 1) (elt stols 4))
        (when (/= (elt stols 2) (elt stols 0))
        (when (/= (elt stols 2) (elt stols 1))
        (when (/= (elt stols 2) (elt stols 3))
        (when (/= (elt stols 2) (elt stols 4))
        (when (/= (elt stols 3) (elt stols 0))
        (when (/= (elt stols 3) (elt stols 1))
        (when (/= (elt stols 3) (elt stols 2))
        (when (/= (elt stols 3) (elt stols 4))
        (when (/= (elt stols 4) (elt stols 0))
        (when (/= (elt stols 4) (elt stols 1))
        (when (/= (elt stols 4) (elt stols 2))
        (when (/= (elt stols 4) (elt stols 3))
        (when (/= (elt stols 0) (elt mebels 0))
        (when (/= (elt stols 0) (elt mebels 1))
        (when (/= (elt stols 0) (elt mebels 2))
        (when (/= (elt stols 0) (elt mebels 3))
        (when (/= (elt stols 0) (elt mebels 4))
        (when (/= (elt stols 0) (elt mebels 5))
        (when (/= (elt stols 1) (elt mebels 0))
        (when (/= (elt stols 1) (elt mebels 1))
        (when (/= (elt stols 1) (elt mebels 2))
        (when (/= (elt stols 1) (elt mebels 3))
        (when (/= (elt stols 1) (elt mebels 4))
        (when (/= (elt stols 1) (elt mebels 5))
        (when (/= (elt stols 2) (elt mebels 0))
        (when (/= (elt stols 2) (elt mebels 1))
        (when (/= (elt stols 2) (elt mebels 2))
        (when (/= (elt stols 2) (elt mebels 3))
        (when (/= (elt stols 2) (elt mebels 4))
        (when (/= (elt stols 2) (elt mebels 5))
        (when (/= (elt stols 3) (elt mebels 0))
        (when (/= (elt stols 3) (elt mebels 1))
        (when (/= (elt stols 3) (elt mebels 2))
        (when (/= (elt stols 3) (elt mebels 3))
        (when (/= (elt stols 3) (elt mebels 5))
        (when (/= (elt stols 4) (elt mebels 0))
        (when (/= (elt stols 4) (elt mebels 1))
        (when (/= (elt stols 4) (elt mebels 2))
        (when (/= (elt stols 4) (elt mebels 3))
        (when (/= (elt stols 4) (elt mebels 4))
        (when (/= (elt stols 4) (elt mebels 5))
        (when (/= (elt mebels 0) (elt mebels 1))
        (when (/= (elt mebels 0) (elt mebels 2))
        (when (/= (elt mebels 0) (elt mebels 3))
        (when (/= (elt mebels 0) (elt mebels 4))
        (when (/= (elt mebels 0) (elt mebels 5))
        (when (/= (elt mebels 1) (elt mebels 0))
        (when (/= (elt mebels 1) (elt mebels 2))
        (when (/= (elt mebels 1) (elt mebels 4))
        (when (/= (elt mebels 1) (elt mebels 5))
        (when (/= (elt mebels 2) (elt mebels 0))
        (when (/= (elt mebels 2) (elt mebels 1))
        (when (/= (elt mebels 2) (elt mebels 3))
        (when (/= (elt mebels 2) (elt mebels 4))
        (when (/= (elt mebels 2) (elt mebels 5))
        (when (/= (elt mebels 4) (elt mebels 0))
        (when (/= (elt mebels 4) (elt mebels 1))
        (when (/= (elt mebels 4) (elt mebels 2))
        (when (/= (elt mebels 4) (elt mebels 3))
        (when (/= (elt mebels 4) (elt mebels 5))
        (when (/= (elt mebels 5) (elt mebels 0))
        (when (/= (elt mebels 5) (elt mebels 1))
        (when (/= (elt mebels 5) (elt mebels 2))
        (when (/= (elt mebels 5) (elt mebels 3))
        (when (/= (elt mebels 5) (elt mebels 4))
        (princ x)
        (princ "\n  + \n")
        (princ x)
        (princ "\n  = \n")
        (print sum_x)
        (princ "Поиск других решений...\n")
        )))))))))))))))))))))))))))))))))))))
        )))))))))))))))))))))))))))))))))))))
    )
    (when (= x up_rng)
     (princ "Больше решений на заданном промежутке нет\n")
     (return))
    (setq x(1+ x))
  )
)
