
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█             2. СПРАВОЧНОЕ РУКОВОДСТВО ПО ЯЗЫКУ                 █
█                      Turbo-Prolog 2.0                          █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

               2.1 Вычисление атрибутов экрана

     Значение атрибута экрана (отвечающего за установку цвета)
вычмсляется суммированием значений атрибута фона и атрибута символов.
Для мерцания - к полученному значению добавляется 128.


ЦВЕТ ФОНА               Атрибут   ЦВЕТ СИМВОЛОВ        Атрибут
-----------------------+---------+----------------+------------
Черный                  0         Черный                   0
Синий                   16        Синий                    1
Зеленый                 32        Зеленый                  2
Голубой                 48        Голубой                  3
Красный                 64        Красный                  4
Сиреневый               80        Сиреневый                5
Коричневый              96        Коричневый               6
Белый                  112        Белый                    7
                                  Серый                    8
                                  Ярко-синий               9
                                  Ярко-зеленый            10
                                  Ярко-голубой            11
                                  Ярко-красный            12
                                  Ярко-сиреневый          13
                                  Желтый                  14
                                  Ярко-белый              15


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2  Стандартные предикаты                        █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

     Для каждого предиката указаны типы аргументов и допустимые со-
четания их потоковых шаблонов:
  i - аргумент имеет определенное значение при любом обращении
      к данному предикату;
  o - аргумент получает значение при любом обращении к предикату.

Стандартные типы аргументов (домены):

char            1 байт - символ
integer         2 байта - целое число
real            8 байт - вещественное число
ref             указатель базы данных
symbol          символьная строка
string            - " -
dbasedom        домен термов базы данных
bt_selector     двоичный селектор внешней базы данных
db_selector     селектор внешней базы данных, определяемый программистом
place           место размещения
                   in_memory; - в памяти
                   in_ems;    - в расширенной памяти
                   in_file    - в файле на диске
file            тип файла
                   keyboard; - клавиатура
                   screen;   - экран
                   printer;  - принтер
                   ...
                   определяемый программистом
reg             регистры
                   reg(AX,BX,CX,DX,SI,DI,DS,ES)
bgi_ilist       список целых чисел, используемый в BGI графике


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.1  Ввод                                       █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

readln(String-переменная)  - читает символы из текущего входного
        (string) - (o)     потока, пока не встретится ASCII-код
                           "Возврат каретки"

readint(Integer-переменная) - читает целые символы из текущего входного
        (integer) - (o)     потока, пока не встретится ASCII-код
                           "Возврат каретки"

readreal(Real-переменная) - читает вещественные символы из текущего входного
        (real) - (o)     потока, пока не встретится ASCII-код
                           "Возврат каретки"

readchar(Char-переменная) - читает один символ из текущего входного потока
        (char) - (o)

file_str(ИмяФайлаDos,String-переменная) - связывание содержимого текстового
        (string,string) - (i,o) (i,i)      файла с переменной

inkey(Char-переменная)                - возвращает значение нажатой клавиши
        (Char) - (o)

readterm( Домен, Переменная )         - переменная-терм связывается с объек-
        (Имя домена, Терм) - (i,_)     том чтения при условии его согласо-
                                       вания с доменом

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.2  Вывод                                      █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

write( Список переменных и констант ) - предикат выводит аргументы (cвязан-
                                       ные переменные и константы) на экран
                                       или другое устройство (определенное
                                       с помощью предиката writedevice) в
                                       указанном порядке
    Управляющие символы для предиката write (указываются в виде строковой
константы, т.е. заключаются в двойные кавычки):
\n - новая строка
\t - табуляция
\nnn - символ с кодом nnn


nl                                      - вывод с новой строки

writef( ФорматСтрока,Переменная|Константа * ) - форматный вывод

В управляющей строке формата после знака % используются спецификации:
 %d  Обычное десятичное число (для вывода симолов и целых)
 %u  Без знака (целые и единичные символы).
 %R  Как число-ссылка на базу данных.
 %X  Шестнадцатеричное двойной длины (строки, ссылки-указатели БД).
 %x  Шестнадцатеричное число (символы и целые).
 %s  Строки.  (для аргументов с типами symbol и string).
 %c  Символ. (символы и целые).
 %g  Вещественные в возможно коротком формате (только тип real).
 %e  Вещественное число в экспоненциальной форме.
 %f  Вещественное число в десятичной форме.
 %lf Только вещественные константы.


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.3  Файловая система                           █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


openread(СимволическоеИмяФайла,ИмяФайлаDos) - открывает файл для чтения
        (file,string) - (i,i)

openwrite(СимволическоеИмяФайла,ИмяФайлаDos) - открывает файл для записи;
        (file,string) - (i,i)                  если такой файл уже сущест-
                                               вует в каталоге, то содер-
                                               жимое его уничтожается

openappend(СимволическоеИмяФайла,ИмяФайлаDos) - открывает дисковый файл
        (file,string) - (i,i)                   для добавления информации

openmodify(СимволическоеИмяФайла,ИмяФайлаDos) - открывает файл для чтения
        (file,string) - (i,i)                   и записи

readdevice(СимволическоеИмяФайла)             - в случае (i) переключает
        (file) - (i) (o)                        текущий входной поток на
                                                файл с указанным именем;
                                                в случае (o) аргумент свя-
                                                зывается с именем текущего
                                                устройства чтения

writedevice(СимволическоеИмяФайла)           - в случае (i) переключает
        (file) - (i) (o)                       текущий выходной поток на
                                               файл с указанным именем;
                                               в случае (o) аргумент свя-
                                               зывается с именем текущего
                                               устройства вывода

filemode(СимволическоеИмяФайла,Спецификация) - в случае, когда Специфика-
        (file,Integer) - (i,i) (i,o)           ция (i), возращает true
        Спецификация: 0 - Текстовый,           при совпадении со специфи-
                      1 - Двоичный.            кацией заданного файла; в
                                               случае (o) возвращает спе-
                                               цификацию заданного файла

closefile(СимволическоеИмяФайла)             - закрывает файл
        (file) - (i)

filepos(СимволическоеИмяФайла,Позиция,Режим) - меняет (Позиция - i) или
        (file,real,integer) - (i,i,i) (i,o,i)  возвращает (Позиция - о)
        Режим: 0 - относительно начала файла   позицию места чтения/записи
               1 - текущей позиции             файла относительно:
               2 - конца файла                  - начала файла
                                                - текущей позиции
                                                - конца файла

eof(СимволическоеИмяФайла)                   - проверяет является ли теку-
        (file) - (i)                           щая позиция файла (в про-
                                               цессе его чтения) концом
                                               файла

flush(СимволическоеИмяФайла)                 - записывает содержимое внут-
        (file) - (i)                           реннего буфера в файл

existfile(ИмяФайлаDos)                       - проверяет наличие файла
        (string) - (i)                         в каталоге DOS текущего
                                               устройства

deletefile(ИмяФайлаDos)                      - уничтожает указанный файл
        (string) - (i)                         из каталога DOS



                              - 20 -



renamefile(СтароеИмяФайлаDos,НовоеИмяФайлаDos) - переименование файла
        (string,string) - (i,i)

disk(Путь_к_Каталогу)                        - Устанавливает (возвращает)
        (string) - (i) (o)                     текущее устройство и каталог


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.4  Управление экраном                         █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

scr_char(Строка,Столбец,Символ)
        (integer,integer,char) - (i,i,i) (i,i,o)
        - пишет (возвращает) символ на экран с текущим атрибутом в пози-
          цию,указанную номером строки и столбца

scr_attr(Строка,Столбец,Атрибут)
        (integer,integer,integer) - (i,i,i) (i,i,o)
        - устанавливает или возвращает атрибут символа в указанной
          позиции

field_str(Строка,Столбец,Длина,Строка)
        (integer,integer,integer,string) - (i,i,i,i) (i,i,i,o)
        - если строка и столбец указывают на позицию внутри текущего
          окна и поле данной длины, начинающееся с данной позиции,
          может быть помещено в окно, то значение, с которым сцеплен
          аргумент Строка, будет занесено в эту позицию, причем будет
          записано столько символов, сколько указано в аргументе
          Длина. В случае (o) предикат возвращает значение поля

field_attr(Строка,Столбец,Длина,Атрибут)
        (integer,integer,integer,integer) - (i,i,i,i) (i,i,i,o)
        - если строка и столбец указывают на позицию внутри текущего
          окна и поле данной длины, начинающееся с данной позиции,
          может быть помещено в окно, то все позиции этого поля будут
          иметь атрибут Атрибут

cursor(Строка,Столбец)
        (integer,integer) - (i,i) (o,o)
        - помещает курсор в указанную позицию текущего окна или воз-
          вращает текущую позицию

cursorform(НачалоСтроки,КонецСтроки)
          0<НачалоСтроки<14, 0<КонецСтроки<14
        (integer,integer) - (i,i) (o,o)
        - задает/возвращает размеры курсора

attribute(Атрибут)
        (integer) - (i) (o)
        - устанавливает (возвращает) значение атрибута по умолчанию
          для всех позиций экрана



                              - 21 -



textmode(Строка,Столбец)
        (integer,integer) - (i,i) (o,o)
        - устанавливает/возвращает параметры текста (количество
          строк и максимальную количество столбцов)

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.5  Оконная система                            █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

makewindow(НомОкна,АтрОкна,АтрРамки,СтрРамки,Стр,Cтолб,Высота,Ширина)
        (integer,integer,integer,string,integer,integer,integer,integer)
        - (i,i,i,i,i,i,i,i)
          (o,o,o,o,o,o,o,o)
        - определяет область экрана как окно с номером НомОкна. Параметр
          АтрРамки ограничивает область окна рамкой указанного цвета,
          строка СтрРамки помещается в разрыв рамки (в верхней части
          окна с центрированием). Параметры Стр и Столб определяют
          верхнюю левую позицию окна, а Высота и Ширина - его размеры;
          параметр АтрОкна определяет цвет окна и символов. В случае (o)
          возвращаются все параметры текущего окна

makewindow(НомОкна,АтрОкна,АтрРамки,СтрРамки,Стр,Cтолб,Высота,Ширина,
                                           Очистка,ПозицияРам,ВидРамки)
        (integer,integer,integer,string,integer,integer,integer,integer,
                                                integer,integer,string)
        - (i,i,i,i,i,i,i,i,i,i,i)
        - (o,o,o,o,o,o,o,o,o,o,o)
        - в отличие от предыдущего предиката дополнительно используются
          следующие параметры:

        Очиcтка         = 0     без очистки окна при создании
                       = 1     с очисткой окна

        ПозицияРам     = 255   СтрРамки центрируется  (заголовок окна)
                       <> 255  позиция СтрРамки

        ВидРамки                Строка содержит 6 символов, из которых
                                будет формироваться рамка окна:

                                1 символ: Верхний левый угол
                                2 символ: Верхний правый угол
                                3 символ: Нижний левый угол
                                4 символ: Нижний правый угол
                                5 символ: Горизонтальные линии
                                6 символ: Вертикальные линии
        Например
                "┌┐└┘─│"       обычная рамка
        или     "╔╗╚╝═║"       двойная рамка




                              - 22 -



shiftwindow(НомОкна)
        (integer) - (i) (o)
        - устанавливает или возвращает номер текущего окна

gotowindow(НомОкна)
        (integer) - (i)
        - направляет поток ввода/вывода в окно с заданным номером

resizewindow
        - изменяет размеры окна в диалоге

resizewindow(Стр,Cтолб,Высота,Ширина)
        (integer,integer,integer,integer) - (i,i,i,i)
        - изменяет размеры текущего окна на заданные

colorsetup(Признак)
        (integer) - (i)
        - устанавливает в диалоге новый цвет окна:

          Признак       = 0     изменение цвета окна
                        = 1     изменение цвета рамки окна

existwindow(НомОкна)
        (integer) - (i)
        - возвращает true, если существует окно с номером НомОкна

removewindow
        - удалает текущее окно с экрана

removewindow(НомОкна,Refresh)
        (Integer,Integer) - (i,i)
        Refresh         = 0     Не вовращаться к предъидущнму.
                        = 1     Вовращаться к предъидущнму.

clearwindow
        - очистка текущего окна

window_str(СтрокаЭкрана)
        (string) - (i) (o)
        - аргумент совмещается с текстом, находящимся
          в текущем окне

window_attr(Атрибут)
        (integer) - (i)
        - установка атрибута (цвета) текущего окна

scroll(ПриращСтолбца,ПриращКолонки)
        (integer,integer) - (i,i)
        - перемещает текст в текущем окне в заданном
          направлении



                              - 23 -



framewindow(АтрибРамки)
        (integer) - (i)
        - установка атрибута (цвета) рамки текущего окна

framewindow(АтрибРамки,СтрокаРам,ПозицСтр,ВидРамки)
        (Integer,String,Integer,String)
        - (i,i,i,i)
        - установка параметров рамки текущего окна:

        АтрибРамки      =       Цвет (атрибут) рамки окна

        СтрокаРам       =       Заголовок окна

        ПозицСтр        =       0 .. ширина окна. Специфицирует
                                расположение заголовка окна.
                                Значение 255 - заголовок в центре

        ВидРамки        =       аналогичен соответствующему
                                аргументу предиката makewindow                          Please refer to makewindow.

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.6  Обработка строк                            █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

frontchar(Строка,НачСимвол,ОстатокСтр)
        (string,char,string) - (i,o,o) (i,i,o)
        (i,o,i) (i,i,i) (o,i,i)
        - соответствует выражению: Строка=НачСимвол+ОстатокСтр

fronttoken(Строка,Знак,ОстатокСтр)
        (string,string,string) - (i,o,o) (i,i,o)
        (i,o,i) (i,i,i) (o,i,i)
        - соответствует выражению: Строка=Знак+ОстатокСтр;
          под знаком подразумевается:
          1) имя, соответствующее синтаксису Пролога
          2) число
          3) одиночный символ (не пробел)

frontstr(Длина,ВходнаяСтрока,НачалоСтр,ОстатокСтр)
        (integer,string,string,string) - (i,i,o,o)
        - разделяет ВходнуюСтроку на две части; НачалоСтр будет
          содержать столько символов, сколько определено первым
          аргументом; ОстатокСтр будет связан с оставшимися
          символами

concat(Строка1,Строка2,Строка3)
        (string,string,string) - (i,i,o) (i,o,i)
        (o,i,i) (i,i,i)
        - соответствует выражению: Строка3 = Строка1 + Строка2
          (конкатенация строк)



                              - 24 -



str_len(Строка,Длина)
        (string,integer) - (i,i) (i,o) (o,i)
        - второй аргумент связывается с количеством символов
          в Строке

isname(Строка)
        (string) - (i)
        - выполняется успешно, если аргумент является именем,
          соответствующим синтаксису Пролога

format(ВыходнПеременная,СтрокаФормата, Переменная|Константа* )
        - преобразование по формату; СтрокаФормата аналогична
          Формату в предикате writef

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.6  Преобразования                             █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


char_int(ПарСимвол,ПарЦелое)
        (char,integer) - (i,o) (o,i) (i,i)
        - ПарЦелое связывается с ASCII-кодом первого аргумента

str_int(ПарСтрока,ПарЦелое)
        (string,integer) - (i,o) (o,i) (i,i)
        - первый аргумент связан со строкой десятичных цифр, пред-
          ставляющих значение аргумента ПарЦелое

str_char(ПарСтрока,ПарСимвол)
        (string,char) - (i,o) (o,i) (i,i)
        - преобразование символа из ПарСимвол в строку ПарСтрока

str_real(ПарСтрока,ПарВещественное)
        (string,real) - (i,o) (o,i) (i,i)
        - первый аргумент связан со строкой десятичных цифр, пред-
          ставляющих вещественное значение аргумента ПарВещественное

upper_lower(СтрокаВерхнРегистра,СтрокаНижнРегистра)
        (string,string) - (i,i) (i,o) (o,i)
        - аргументы связаны со значением одной и той же
          строки, но первый - на верхнем регистре, а второй -
          на нижнем

upper_lower(СимвВерхнРегистра,СимвНижнРегистра)
        (char,char) - (i,i) (i,o) (o,i)
        - аргументы связаны со значением одного и того же
          символа, но первый - на верхнем регистре, а второй -
          на нижнем



                              - 25 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.7  Управление внутренней базой данных         █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

consult(ИмяФайлаDos)
        (string) - (i)
        - загрузить БД из файла

consult(ИмяФайлаDos,ИмяВнутрБД)
        (string,InternalDatabaseName) - (i,i)
        - загрузить БД с именем ИмяВнутрБД из файла

save(ИмяФайлаDos)
        (string) - (i)
        - сохранить БД в файле

save(ИмяФайлаDos,ИмяВнутрБД)
        (string,DatabaseName) - (i,i)
        - сохранить БД с именем ИмяВнутрБД в файле

assert( Teрм )
        (InternalDatabaseDomain) - (i)
        - добавить Терм в БД

asserta( Teрм )
        (InternalDatabaseDomain) - (i)
        - добавить Терм в начало БД

assertz( Teрм )
        (InternalDatabaseDomain) - (i)
        - добавить Терм в конец БД

nondeterm retract( Teрм )
        (InternalDatabaseDomain) - (_)
        - удалить Терм из БД

nondeterm retract( Teрм, ИмяВнутрБД )
        (InternalDatabaseDomain) - (_,i)
        - удалить Терм из БД с именем ИмяВнутрБД

retractall(Teрм)
        (InternalDatabaseDomain) - (_)
        - удалить все термы, совместимые с Терм из БД

retractall(_, ИмяВнутрБД )
        (_,InternalDatabaseDomain) - (_,i)
        - удалить все термы из БД с именем ИмяВнутрБД



                             - 26 -

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                               █
█             2.2.8    Управление Внешней БД                    █
█                                                               █
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

db_create(Селектор,ИмяфайлаDos,Место)   -Создать БД c именем ИмяфайлаDos
        (db_selector,string,place)      и разместить на Место
               (i,i,i)


db_open(Селектор,ИмяфайлаDos,Место)     -Открыть БД с именем ИмяфайлаDos,
        (db_selector,string,place)      размещенную на Место
             (i,i,i)

db_openinvalid(Селектор,ИмяфайлаDos,Место)  -Открыть дефектную БД с именем
        (db_selector,string,place)          ИмяфайлаDos и размещенную на
            (i,i,i)                           Место


db_close(Селектор)                      -Закрыть БД
        (db_selector) - (i)

db_delete(ИмяфайлаDos,Место)            -Удалить БД
        (string,place) - (i,i)

db_flush(Селектор)                      -Сбросить    содержимое
        (db_selector) - (i)              внутреннего буфера в БД

db_garbagecollect(Селектор)             -Удалить "мусор" из БД
        (db_selector) - (i)            { физически уничтожить удаленные
                                                записи }

db_copy(Селектор,ИмяфайлаDos,Место)     -Скопировать БД на новое Место
        (db_selector,string,place)
            (i,i,i)

nondeterm db_chains(Селектор,Список)    -агумент Список возвращает
        (db_selector,string) - (i,o)    имена списков,хpанящихся в БД

nondeterm db_btrees(Селектор,ИмяДерева) -агумент ИмяДерева возвращает
        (db_selector,string) - (i,o)       имена деревьев ключей

db_statistics(Селектор,ЧислоТермов,ОбъемПамяти,ОбъемБД,ОбъемСвобПамяти)
        (db_selector,real,real,real,real) - (i,o,o,o,o)

          -справочная информация о состоянии БД :
        ЧислоТермов     -общее число записей в БД
        ОбъемПамяти     -число байт использованых в памяти
        ОбъемБД         -число байт использованых в БД
        ОбъемСвобПамяти -число байт свободных на диске



                           - 27 -



chain_inserta(Селектор,Список,Домен,Терм,Указатель)
        (db_selector,string,symbol,<Домен>,ref) - (i,i,i,i,o)

   -добавить Терм в начало списка, с именем которого связан аргумент Список.
    Терм должен соответствовать домену, указаному в аргументе Домен.
    Аргумент Указатель получает значение ссылки на добавленную запись

chain_insertz(Селектор,Список,Домен,Терм,Указатель)
        (db_selector,string,symbol,<Домен>,ref) - (i,i,i,i,o)

   -добавить Терм в конец списка, с именем которого связан аргумент Список.
    Терм должен соответствовать домену, указаному в аргументе Домен.
    Аргумент Указатель получает значение ссылки на добавленную запись

chain_insertafter(Селектор,Домен,Указатель,Терм,НовУказатель)
        (db_selector,symbol,ref,<Домен>,ref) - (i,i,i,i,o)

   -добавить Терм в список после записи с ссылкой Указатель.
    Аргумент НовУказатель получает значение ссылки на добавленную запись.

chain_delete(Селектор,Список)         -удалить список, с именем
   (db_selector,string) - (i,i)       которого связан аргумент Список


nondeterm chain_terms(Селектор,Список,Домен,Терм,Указатель)
        (db_selector,string,symbol,<Домен>,ref)-(i,i,i,_,o)

   -возвращает Термы и ссылки на них из списка, с именем которого
   связан аргумент Список.

chain_first(Селектор,Список,ПервУказатель)  -аргумент ПервУказатель
        (db_selector,string,ref)             возвращает ссылку на
             (i,i,o)                         первый терм в Списке


chain_last(Селектор,Список,ПоследУказатель) -аргумент ПоследУказатель
        (db_selector,string,ref) - (i,i,o)   возвращает ссылку на
                                             последний терм в Списке

chain_next(Селектор,Указатель,СледУказатель)
        (db_selector,ref,ref) - (i,i,o)

   -аргумент СледУказатель возвращает ссылку на следующий терм
    в  Cписке  после записи с ссылкой  Указатель


                         - 28 -


chain_prev(Селектор,Указатель,ПредшествУказатель)
        (db_selector,ref,ref) - (i,i,o)

   -аргумент ПредшествУказатель возвращает ссылку на предшествующий
     терм в Списке

term_delete(Селектор,Список,Указатель)     -удалить терм с ссылкой Указатель
        (db_selector,string,ref) - (i,i,i)   из   Списка

term_replace(Селектор,Домен,Указатель,НовТерм)
        (db_selector,symbol,ref,<Домен>) - (i,i,i,i)

   -заменить терм с ссылкой Указатель на НовТерм { новый терм }
   Новый терм должен соответствовать домену, указаному в аргументе Домен.

ref_term(Селектор,Домен,Указатель,Терм)
        (db_selector,symbol,ref,<Домен>)-(i,i,i,_)

    -взять Терм по ссылке Указатель

bt_create(Селектор,ИмяДерева,Селектор_дерева,ДлинКлюча,Порядок)
        (db_selector,string,bt_selector,integer,integer) - (i,i,o,i,i)

    -создать дерево ключей с именем ИмяДерева

bt_open(Селектор,ИмяДерева,Селектор_дерева)
        (db_selector,string,bt_selector) - (i,i,o)

bt_close(Селектор,Селектор_дерева)
        (db_selector,bt_selector) - (i,i)

bt_delete(Селектор,ИмяДерева)
        (db_selector,string) - (i,i)

bt_statistics(Селектор,Селектор_дерева,ЧислоКлючей,ЧислоСтраниц,
    Dept{ глубина },ДлинаКлюча,Порядок,РазмерСтраницы)
     (db_selector,bt_selector,real,real,integer,integer,integer,integer)
         - (i,i,o,o,o,o,o,o)

key_insert(Селектор,Дерево,Ключ,Указатель)
        (db_selector,bt_selector,string,ref) - (i,i,i,i)

   -вставить Ключ записи с ссылкой Указатель в Дерево

key_delete(Селектор,Дерево,Ключ,Указатель)
        (db_selector,bt_selector,string,ref) - (i,i,i,i)

   -удалить Ключ записи с ссылкой Указатель из Дерева


                         - 29 -



key_first(Селектор,Дерево,ПервУказатель)
        (db_selector,bt_selector,ref) - (i,i,o)
   -выдать ссылку { аргумент ПервУказатель } по первому ключу Дерева

key_last(Селектор,Дерево,ПоследУказатель)
        (db_selector,bt_selector,ref) - (i,i,o)

   -выдать ссылку { аргумент ПоследУказатель } по последнему ключу Дерева

key_search(Селектор,Дерево,Ключ,Указатель)
        (db_selector,bt_selector,string,ref) - (i,i,i,o)

   -найти ссылку { аргумент Указатель } по Ключу Дерева

key_next(Селектор,Дерево,СледУказатель)
        (db_selector,bt_selector,ref) - (i,i,o)

   -выдать ссылку { аргумент СледУказатель } по следующему ключу Дерева

key_prev(Селектор,Дерево,ПредшествУказатель)
        (db_selector,bt_selector,ref) - (i,i,o)

 -выдать ссылку { аргумент ПредшествУказатель } по предшествующему ключу Дерева

key_current(Селектор,Дерево,Ключ,Указатель)
        (db_selector,bt_selector,string,ref) - (i,i,o,o)

   -выдать ссылку { аргумент Указатель } по текущему ключу Дерева



                              - 30 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.9  BGI - графика                              █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

     Условные номера графических драйверов:

           Detect          = 0;  требуется автоматическое распозна-
                                 вание
           CGA             = 1;
           MCGA            = 2;
           EGA             = 3;
           EGA64           = 4;
           EGAMono         = 5;
           RESERVED        = 6;
           HercMono        = 7;
           ATT400          = 8;
           VGA             = 9;
           PC3270          = 10;

      Графические режимы для каждого драйвера :

           CGAC1        = 0; { 1 палитра цветов 320х200: красный,
                               желтый, зеленый; 1 страница }
           CGAC2        = 1; { 2 палитра цветов 320х200: светло-
                               бирюзовый, малиновый, белый; 1
                               страница }
           CGAHi        = 2; { 640х200, 1 страница }
           MCGAC1       = 0  { 1 палитра цветов 320х200: красный,
                               желтый, зеленый; 1 страница }
           MCGAC2       = 1; { 2 палитра цветов 320х200: светло-
                               бирюзовый, малиновый, белый; 1
                               страница }
           MCGAMed      = 2; { 640х200, 1 страница }
           MCGAHi       = 3; { 640х480, 2 цвета, 1 страница }
           EGALo        = 0; { 640х200, 4 страницы }
           EGAHi        = 1; { 640х350, 16 цветов, 2 страницы }
           EGA64Lo      = 0; { 640х200, 16 цветов, 1 страница }
           EGA64Hi      = 1; { 640х350, 4 цвета, 1 страница }
           EGA64MonoHi  = 3; { 640х350, 64К на плату, 1 страница -
                               256К на плзту, 4 страницы }
           HercMonoHi   = 0; { 720х348, 2 страницы }
           ATT400C1     = 0; { 1 палитра цветов 320х200: красный,
                               желтый, зеленый; 1 страница }
           ATT400C2     = 1; { 2 палитра цветов 320х200: светло-
                               бирюзовый, малиновый, белый; 1
                               страница; 20 - 640х200, 1 страница }
           ATT400Med    = 2; { 640х200, 1 страница }
           ATT400Hi     = 3; { 640х200, 1 страница }
           VGALo        = 0; { 640х200, 16 цветов, 4 страницы }
           VGAMed       = 1; { 640х350, 16 цветов, 2 страницы }
           VGAHi        = 2; { 640х480, 16 цветов, 1 страница }


                              - 31 -



           VGANi2       = 3; { 640х480, 2 цвета, 1 страница }
           PC3270Hi     = 0; { 720х350, 1 страница }

      Цвета для предикатов SetРаlette и SetАllРаlette :

           Black          = 0;      { черный }
           Blue           = 1;      { синий  }
           Green          = 2;      { зеленый }
           Cyan           = 3;      { бирюзовый }
           Red            = 4;      { красный }
           Magenta        = 5;      { малиновый }
           Brown          = 6;      { коричневый }
           LightGray      = 7;      { светло-серый }
           DarkGray       = 8;      { темно-серый }
           LightBlue      = 9;      { светло-голубой }
           LightGreen     = 10;     { светло-зеленый }
           LightCyan      = 11;     { светло-бирюзовый }
           LightRed       = 12;     { светло-красный }
           LightMagenta   = 13;     { светло-малиновый }
           Yellow         = 14;     { желтый }
           White          = 15;     { белый }

     Типы линий и их толщина для предикатов Get или SetLineStyle:

           SolidLn       = 0;       { непрерывная линия }
           DottedLn      = 1;       { линия, состоящая из точек }
           CenterLn      = 2;       { центрированная линия }
           DashedLn      = 3;       { пунктирная линия }
           UserBitLn     = 4;       { тип линии, заданный пользова-
                                      телем }
           NormWidth     = 1;       { обычная толщина }
           ThickWidth    = 3;       { жирная линия }

     Константы для предикатов Set/GetTextStyle:

           DefaultFont  = 0;        { шрифт с побитовым отображением
                                      8х8 }
           TriplexFont  = 1;        { "штриховой шрифт }
           SmallFont    = 2;        { мелкий шрифт }
           SanScrifFont = 3;
           GothicFont   = 4;

           HorizDir       = 0;      { направление слева-направо }
           VertDir        = 1;      { снизу-вверх }
           NormSize       = 1;      { типовой размер }

          { константы отсечения }
           ClipOn  =  true;
           ClipOff =  false;

          { константы Bar3D }
           TopOn   = true;
           TopOff  = false;



                              - 32 -



     Образцы заполнителей для предикатов Get/SetFill/Style :

           EmptyFill     = 0;   { заполнить область фоновым цветом }
           SolidFill     = 1;   { непрерывное заполнение област  за-
                                  данным цветом }
           LineFill      = 2;   { заполнить --- }
           LtSlashFill   = 3;   { заполнить /// }
           SlashFill     = 4;   { заполнить жирными линиями ///}
           BkSlashFill   = 5;   { заполнить \\\ (жирными линиями) }
           LtBkSlashFill = 6;   { заполнить \\\ }
           HatchFill     = 7;   { заполнить редкой штриховкой }
           XHatchFill    = 8;   { заполнить частой пересекающейся
                                  штриховкой }
           InterLeaveFill = 9;  { заполнить прерывистой линией }
           WideDotFill   = 10;  { заполнить редкими точками }
           CloseDotFill  = 11;  { заполнить частыми точками }

     Битовые операции для предиката PutImage :

           NormalPut  = 0;  { MOV }
           XORPt      = 1;  { XOR }
           OrPut      = 2;  { OR }
           AndPut     = 3;  { AND }
           NotPut     = 4;  { NOT }

     Горизонтальное и вертикальное выравнивание для  предиката
SetТехtJustify :
          CenterText = 1;  { центрирование текста }
          LeftText   = 0;  { выравнивание по левому краю }
          RightText  = 2;  { выравнивание по правому краю }
          BottomText = 0;  { перемещение текста в нижнюю часть экра-
                             на }
          TopText    = 2;  { перемещение текста в верхнюю часть  эк-
                             рана }

Линкование BGI драйверов
        bgidriver "_EGAVGA_driver_far"
        bgidriver "_CGA_driver_far"
        bgidriver "_HERC_driver_far"
        bgidriver "_ATT_driver_far"
        bgidriver "_PC3270_driver_far"
        bgidriver "_IBM8514_driver_far"

Линкование BGI фонтов
        bgifont   "_gothic_font_far"
        bgifont   "_small_font_far"
        bgifont   "_sansserif_font_far"
        bgifont   "_triplex_font_far"




                              - 33 -



                    Стандартные графические предикаты

arc(X,Y,StAngle,EndAngle,Radius)
        (integer,integer,integer,integer,integer) - (i,i,i,i,i)
      - рисует дугу  окружности  от  начального
        угла до конечного угла; точка  (x,y) берется в качестве цен-
        тра окружности.

bar(Left,Top,Right,Bottom)
        (integer,integer,integer,integer) - (i,i,i,i)
      - рисует  столбец,  используя текущий тип
        закраски.

bar3d(Left,Top,Right,Bottom,Depth,Topflag)
        (integer,integer,integer,integer,integer,integer) -
        (i,i,i,i,i,i)
      - рисует  трехмерный столбец, используя
        текущий тип закраски.

circle(X,Y,Radius)
        (integer,integer,integer) - (i,i,i)
      - рисует  окружность с центром в точке
      (х,у).

cleardevice
      - сбрасывает  текущие  параметры,
        установленные  для  устройства  вывода, и подготавливает его
        для вывода.

clearviewport
      - очищает текущую область прос-
        мотра (окно экрана).

closegraph
       -  выполняет  останов  графической
          системы.

detectgraph(Graphdriver,Graphmode)
        (integer,integer) - (o,o)
      - распознает аппаратуру и опреде-
        ляет, какой графический драйвер и режим нужно использовать.

drawpoly(PolyPointsList)
        (bgi_ilist) - (i)
      -  рисует  многоугольник,  используя
         текущий тип линии и цвет.

ellipse(X,Y,StAngle,EndAngle,Xradius,YRadius)
        (integer,integer,integer,integer,integer,integer) -
        (i,i,i,i,i,i)
      - рисует  эллиптическую  дугу  от на-
       чального угла до конечного угла, использую (Х,Y), как  точку
       центра.



                              - 34 -



fillellipse(X,Y,Xradius,YRadius)
        (integer,integer,integer,integer) - (i,i,i,i)
       - рисует закрашенный эллипс, используя текущий
         образец закраски

fillpoly(PolyPointsList)
        (bgi_ilist) - (i)
       - закрашивает многоугольник, исполь-
        зуя преобразователь развертки.

floodfill(X,Y,Border)
        (integer,integer,integer) - (i,i,i)
       - закрашивает ограниченную область,
        используя текущий образец закраски.

getarccoords(X,Y,Xstart,Ystart,Xend,Yend)
        (integer,integer,integer,integer,integer,integer) -
        (o,o,o,o,o,o)
       - позволяет пользователю запраши-
       вать координаты последней команды Аrс.

getaspectratio(Xasp,Yasp)
        (integer,integer) - (o,o)
       - возвращает  действующее раз-
        решение графического экрана, на  основе  которого может быть
        вычислен коэффициент относительного удлинения (Хаsр,Yаsр).

getbkcolor(BkColor)
        (integer) - (o)
       - возвращает текущий фоновый цвет.

getcolor(Color)
        (integer) - (o)
       - возвращает текущий цвет рисунка.

getdrivername(DriverName)
        (string) - (o)
        - возвращает имя текущего графического драйвера

getdefaultpalette(DefaultPalette)
        (bgi_ilist) - (o)
        - возвращает палитру, заданную по умолчанию

getfillpattern(PatternList)
        (bgi_ilist) - (o)
      - возвращает  образец  закраски,
        заданный пользователем.

getfillsettings(FillPattern,FillColor)
        (integer,integer) - (o,o)
      - позволяет  пользователю  вы-
        полнить запрос о текущем образце и цвете  закраски, установ-
        ленными с помощью процедур SetFillStyle и SetFillPattern.



                              - 35 -

getgraphmode(GraphMode)
        (integer) - (o)
       - возвращает  текущий  графический
         режим.

getimage(Left,Top,Right,Bottom,BitMap)
        (integer,integer,integer,integer,string) - (i,i,i,i,o)
      - сохраняет двоичный  образ заданной
        области в буфере.

getlinesettings(LineStyle,Upattern,Thickness)
        (integer,integer,integer) - (o,o,o)
       - возвращает  текущий тип ли-
         нии, образец  линии и  толщину  линии,  заданные  процедурой
         SetLineStyle.

getmaxcolor(MaxColor)
        (integer) - (o)
      - возвращает максимальное количество цветов

getmaxx(X)
        (integer) - (o)
      - возвращает для текущего графическо-
       го драйвера и режима самую правую колонку (разрешение х).

getmaxy(Y)
        (integer) - (o)
      - возвращает для текущего графическо-
        го драйвера и режима самую нижнюю строку (разрешение у).

getmaxmode(MaxMode)
        (integer) - (o)
      - возвращает количество графических режимов для
        текущего графического драйвера

getmodename(DriverMode,ModeName)
        (integer,string) - (i,o)
      - по заданному номеру графического режима возвращает
        его имя

getmoderange(Graphdriver,Lomode,Himode)
        (integer,integer,integer) - (i,o,o)
      - для заданного графического драйвера возвращает
        номера Lo- и Hi-режимов

getpalette(PaletteList)
        (bgi_ilist) - (o)
     - возвращает текущую палитру.

getpalettesize(PaletteSize)
        (integer) - (o)
     - возвращает размер палитры.



                              - 36 -



getpixel(X,Y,Color)
        (integer,integer,integer) - (i,i,o)
     - возвращает цвет точки с координатами X,Y

gettextsettings(Font,Direction,CharSize,Horiz,Vert)
        (integer,integer,integer,integer,integer) - (o,o,o,o,o)
     - возвращает текущие установки для вывода текста
       (фонт, направление и пр.)

getviewsettings(Left,Top,Right,Bottom,Clip)
        (integer,integer,integer,integer,integer) - (o,o,o,o,o)
      - возвращает параметры текущего окна (координаты верхнего
        левого угла и нижнего правого угла окна, признак
        отсечения)

getx(X)
        (integer) - (o)
    - возвращает координату Х  текущей позиции
     (текущего указателя).

gety(Y)
        (integer) - (o)
    - возвращает координату Y  текущей позиции
      (текущего указателя).

graphdefaults
     - сброс всех сделанных установок для графического режима

imagesize(Left,Top,Right,Bottom,Size)
        (integer,integer,integer,integer,integer) - (i,i,i,i,o)
     - возвращает  число  байтов,  которые
      требуются для сохранения прямоугольной области экрана.

initgraph(Graphdriver,Graphmode,NewDriver,NewMode,Pathtodriver)
        (integer,integer,integer,integer,string) - (i,i,o,o,i)
      - инициализирует графическую систе-
       му и переводит аппаратуру в графический режим.

line(X1,Y1,X2,Y2)
        (integer,integer,integer,integer) - (i,i,i,i)
      - рисует прямую линию из точки (x1,y1) в
       (x2,y2).

linerel(Dx,Dy)
        (integer,integer) - (i,i)
     -  рисует   прямую  линию  до  точки,
       представляющей  собой  относительное  расстояние от текущего
       указателя.

lineto(X,Y)
        (integer,integer) - (i,i)
    - рисует линию из текущего положения в
      точку (x,y).



                              - 37 -



moverel(Dx,Dy)
        (integer,integer) - (i,i)
    -  перемещает  текущий  указатель  на
       расстояние, являющееся  относительным расстоянием от текущей
       позиции.

moveto(X,Y)
        (integer,integer) - (i,i)
      - перемещает текущий указатель в точку
       (x,y).

outtext(Textstring)
        (string) - (i)
     - посылыет строку на устройство выво-
      да, начиная с текущего указателя.

outtextxy(X,Y,Textstring)
        (integer,integer,string) - (i,i,i)
     - посылает строку на устройство вы-
       вода.

pieslice(X,Y,Stangle,Endangle,Radius)
        (integer,integer,integer,integer,integer) - (i,i,i,i,i)
    - рисует сектор; точка (Х,Y) исполь-
      зуется в качестве центра, а сектор рисуется от начального до
      конечного угла.

putimage(X,Y,Bitmap,Op)
        (integer,integer,string,integer) - (i,i,i,i)
    - выводит на экран двоичный образ.

putpixel(X,Y,Pixelcolor)
        (integer,integer,integer) - (i,i,i)
    - строит элемент изображения в точке
      x,y.

rectangle(Left,Top,Right,Bottom)
        (integer,integer,integer,integer) - (i,i,i,i)
    - рисует  прямоугольник,  используя
      текущий тип линии и цвет.

restorecrtmode
    - восстанавливает исходный ре-
      жим экрана, который был  установлен при инициализации графики.

setactivepage(Page)
        (integer) - (i)
    - устанавливает для графическо-
      го вывода активную страницу.

setallpalette(PaletteList)
        (bgi_ilist) - (i)
    - изменяет все  цвета  палитры,
      как было указано.



                              - 38 -



setaspectratio(Xasp,Yasp)
        (integer,integer) - (i,i)
    - устанавливает разрешение графического экрана.

setbkcolor(Color)
        (integer) - (i)
    - используя палитру, устанавливает
      текущий фоновый цвет.

setcolor(Color)
        (integer) - (i)
   - используя  палитру,  устанавливает
    текущий цвет рисунка.

setfillpattern(UpatternList,Color)
        (bgi_ilist,integer) - (i,i)
   - выбирает  образец  закраски,
     заданный пользователем.

setfillstyle(Pattern,Color)
        (integer,integer) - (i,i)
    - устанавливает образец закраски
      и ее цвет.

setgraphmode(Mode)
        (integer) - (i)
    - переключает систему  в  графи-
      ческий режим и очищает экран.

setgraphbufsize(BufSize)
        (integer) - (i)
    - устанавливает размер графического буфера.

setlinestyle(Linestyle,Upattern,Thickness)
        (integer,integer,integer) - (i,i,i)
   - устанавливает  текущий тип ли-
     нии и ее ширину.

setpalette(Index,Actual_color)
        (integer,integer) - (i,i)
   - изменяет один цвет  палитры, за-
     данный переменными Index и Actual_Color.

settextjustify(Horiz,Vert)
        (integer,integer) - (i,i)
   - с   помощью    ОutТеxt   и
     ОutТехтХY устанавливает значения для выравнивания текста.

settextstyle(Font,Direction,Charsize)
        (integer,integer,integer) - (i,i,i)
   -   задает   текущий   текстовый
      шрифт, его тип и коэффициент размера символа.



                              - 39 -



setusercharsize(Multx,Divx,Multy,Divy)
        (integer,integer,integer,integer) - (i,i,i,i)

setviewport(Left,Top,Right,Bottom,Clip)
        (integer,integer,integer,integer,integer) - (i,i,i,i,i)
   - для  графического  вывода уста-
    навливает текущую область вывода или окно.

setvisualpage(Pagenum)
        (integer) - (i)
     - задает визуальный номер стра-
        ницы графики.

setwritemode(WriteMode)
        (integer) - (i)
     - устанавливает графический режим для вывода графической
       информации

textheight(Textstring,Height)
        (string,integer) - (i,o)
     - возвращает высоту страниц  в  эле-
       ментах растра.

textwidth(Textstring,Width)
        (string,integer) - (i,o)
     - возвращает ширину строки в  элемен-
       тах изображения.

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.10  "Старая" графика                          █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

graphics(Режим,Палета,ЦветФона)
        (integer,integer,integer) - (i,i,i)
        - инициализирует экран

          Режим Кол-во Кол-во    Описание
          --------------------------------------
           1     320    200       4 цвета
           2     640    200       ч/б экран
           3     320    200       16 цветов
           4     640    200       16 цветов
           5     640    350       13 цветов

           Палета  Цвет 1  Цвет 2  Цвет 3
          -------------------------------------
             0    зеленый красный   желтый
             1    голубой сиреневый белый



                              - 40 -



dot(Стрка,Столбец,Цвет)
        (integer,integer,integer) - (i,i,i) (i,i,o)
        - помещает цветную точку в позицию, определенную
          первыми двумя параметрами

line(Стр,Столб1,Стр2,Столб2,Цвет)
        (integer,integer,integer,integer,integer)
        - (i,i,i,i,i)
        - чертит цветную линию через указанные точки

text    - переход в текстовый режим

█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.11  "Черепашья" графика                       █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

pendown  - активизирует "перо"

penup    - отключает "перо"

pencolor(Цвет)
        (integer) - (i) (o)
         - определяет цвет следа "пера"

forward(Шаг)
        (integer) - (i)
        - указывает сколько шагов должна сделать "черепаха"
          из текущей позиции вперед в текущем направлении

back(Шаг)
        (integer) - (i)
        - действует противоположным образом

right(Угол)
        (integer) - (i)
        - поворачивает "черепаху" направо

left(Угол)
        (integer) - (i)
        - поворачивает "черепаху"  налево




                              - 41 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.12  Работа с редактором                       █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

display(Строка)
        (string) - (i)
        - реализует просмотр Строки в текущем окне с возможностью
          листания и поиска по "образцу"

edit(ВходСтрока,ВыходСтрока)
        (string,string) - (i,o)
        - вызывает редактор Турбо-Пролога в текущее окно и загружает
          в него ВходСтрока; доступны все команды редактора;
          результат редактирования помещается в ВыходСтрока

edit(ВходСтрока,ВыходСтрока,Заголов1,Заголов2,Сообщение,Позиция,
        ИмяФайлаHelp,EditMode,Indent,Insert,TextMode,RetPos,Статус)
        (string,string,string,string,string,integer,string,
        integer,integer,integer,integer,integer,integer)
        - (i,o,i,i,i,i,i,i,i,i,i,o,o)
        - расширяет возможности предыдущего предиката: в окно можно
          вывести два заголовка, курсор помещается в заданную
          Позицию ВходСтроки, Сообщение высвечивается внизу окна, при нажатии
          клавиши F1 загружается дополнительно файл ИмяФайлаHelp.
        Дополнительные параметры:

        EditMode        = 0     только просмотр
                        = 1     редактирование

        Indent          = 0     нет индикации о редактировании
                        = 1     автоиндикация

        Insert          = 0     режим замещения
                        = 1     режим вставки

        TextMode        = 0     текст может выходить за пределы окна
                        = 1     все строки текста автоматически выво-
                                дятся в пределах окна

        RetPos          =       Позиция курсора в ВыходСтроке при выходе
                                из редактора

        RetStatus       = 0     выход из редактора по F10
                        = 1     выход из редактора по Esc


editmsg(ВходСтрока,ВыходСтрока,Заголов1,Заголов2,Сообщение,Позиция,
                                                ИмяФайлаHelp,RetStatus)
        (string,string,string,string,string,integer,string,integer)
        - (i,o,i,i,i,i,i,o)
        - сокращенный вариант предыдущего предиката



                              - 42 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.13  Функции DOS                               █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

system(КоманднаяСтрокаDos)
        (string) - (i)
       - загружает и выполняет внешнюю программу с именем
         КоманднаяСтрокаDos

system(КоманднаяСтрокаDos,ResetVideo,RetCode)
        (string,integer,integer) - (i,i,o)
       - отличается от предыдущего дополнительными параметрами:

        ResetVideo      = 0     Без очистки экрана
                        = 1     С очисткой экрана

        RetCode         =       Код возврата внешней программы (ErrorLevel).

dir(Путь,ШаблонФайла,ИмяФайла)
        (string,string,string) - (i,i,o)
        - выбор файла из меню по указанному пути и шаблону файла

dir(Путь,ШаблонФайла,ИмяФайла,ShowDir,ChgFileMask,ShowPath)
        (string,string,string) - (i,i,o,i,i,i)
        - дополняет предыдущий следующими возможностями

        ShowDir         = 0     Без подключения директория
                        = 1     С включением директория

        ChgFileMask     = 0     Без изменения шаблона файла
                        = 1     С изменением шаблона по F4

        ShowPath        = 0     Без показа текущего шаблона
                        = 1     С показом шаблона файла в окне

comline(LineBuffer)
        (String) - (o)
        - возвращает параметр, переданный EXE-модулю в
          командной строке

envsymbol(Контекст,Строка)
        (string,string) - (i,o)
        - возвращает информацию о контексте, заданную
          командой SET в DOS




                              - 43 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.14  Обработка ошибок                          █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


trap(Предикат,КодОшибки,ВызывПредикат)
       - возвращает КодОшибки после выполнения Предиката и
         вызывает предикат ВызывПредикат для ее обработки

exit   - возврат в систему

exit(КодВозврата)
        (integer) - (i)
       - возврат в систему (DOS) с передачей кода возврата

break(on/off)
        (string) - (i) (o)
       - включить/выключить возможность прерывания программы по
         клавише Ctrl+Break

breakpressed
       - тест для Ctrl+Break

errormsg(ИмяФайла,НомОшибки,СообщениеОбОшибке,СправкаПоОшибке)
        (String,Integer,String,String) - (i,i,o,o)
       - возвращает СообщениеОбОшибке и СправкуПоОшибке по задан-
         ному номеру ошибки из файла ИмяФайла, соответствующего
         по структуре файлу Prolog.err

readtermerror(ОшибСтрока,ПозицОшибки)
        (string,integer)-(o,o)
       - возвращает ошибочную строку и позицию ошибочного символа
         при чтении терма

consulterror(ОшибСтрока,ПозицОшибки,НомСтроки)
        (string,integer,real)-(o,o,o)
       - возвращает ошибочную строку, позицию ошибочного символа и
         номер этой строки в файле, из которого загружается БД




                              - 44 -



█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█                 2.2.15  Разное                                 █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


random(Real-переменная)
        (real) - (o)
        - возвращает случайное число в диапазоне [0,1]

random(MaксЗнач,СлучЦелое)
        (integer,integer) - (i,o)
       - возвращает случайное целое число в диапазоне [0,МаксЗнач]

storage(Stack,Heap,Trail)
        (real,real,real) - (o,o,o)
       - возвращает доступные размеры трех областей памяти:
          Stack - резолюционный стек;
          Heap - область фактов БД;
          Trail - область регистрации связанных и несвязанных
                  переменных

sound(Продолжительн,Частота)
        (integer,integer) - (i,i)
        - звучание сигнала данной частоты с указанной
          продолжительностью

beep    - короткий звуковой сигнал

date(Год,Месяц,День)
        (integer,integer,integer) - (o,o,o) (i,i,i)
        - аргументы совмещаются с текущей датой

time(Часы,Mинуты,Секунды,Миллисекунды)
        (integer,integer,integer,integer) - (o,o,o,o) (i,i,i,i)
        - аргументы совмещаются с текущим временем

trace(on/off)
        (string) - (i) (o)
        - включает/выключает режим трассировки

findall( Переменная, Атом, Переменная-Список )
        - если Атом является предикатом с переменными-аргументами,
          а Переменная - одна из переменных этого предиката,
          то Переменная-Список будет связана со списком значений
          для этой переменной, который получается, когда предикат
          успешно выполняется благодаря бэктрекингу

not( Aтом )
        - возвращает "true", если предикат Атом заканчивается
          неуспешно



                              - 45 -



free( Переменная )
        - возвращает "true", если переменная несвязана

bound( Переменная )
        - возвращает "true", если переменная связана

fail    - всегда возвращает значение "false" и вызывает возврат

true    - всегда возвращает значение "true" ("истина")


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.16  Арифметика                                █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

Арифметические операции: +, -, *, /, mod, div

Операции отношения: >, <, =, >=, <=, <>, ><

Функции: sin, cos, tan, arctan, ln, log, exp, sqrt, round, trunc, abs


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.17 Секции программы                           █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█

CONSTANTS
  константа1 = значение1
  константа2 = значение2

[GLOBAL] DOMAINS
   домен1 [,домен2] = [ссылка] об'явление1; об'явление2
   список = домен*
   домен = <базисный домен>

[GLOBAL] DATABASE [ - <Имя БД> ]
   [determ] пред1(....)
            пред2(.....)

GLOBAL PREDICATES
  [determ|nondeterm] пред1(.........)
        -(i,i,o,..)(i,o,i,..) [ language c|pascal|fortran ] [ as "name" ]
  пред2(........)

PREDICATES
  [determ|nondeterm] пред1(.........)
  пред2(........)



                              - 46 -



CLAUSES
  p(....):-p1(...), p2(.....), ... .
  p(....):-p1(...), p2(.....), ... .


include "ИмяФайла" - вставляет файл с исходной программой при
                     компиляции


█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                                                                █
█              2.2.18  Опции                                     █
█                                                                █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█


trace           трассировка всех предикатов

trace p1,p2,..  трассировка предикатов p1,p2,...

shorttrace      трассировка всех предикатов без нарушения систем-
                ной оптимизации

shorttrace p1,p2,..
                трассировка предикатов р1,р2,...без нарушения систем-
                ной оптимизации

nowarnings      подавление выдачи предупреждений

nobreak         отключается возможность прерывания программы по
                нажатию клавиш CTRL+BREAK

diagnostics     вывод диагностики компилятора

config "ИмяФайлаКонфиг"
                загружаемый файл конфигурации для EXE-модулей

code=nnn        размер памяти для программного кода (по умолчанию 1000)

trail=nnn       размер памяти для ссылок на переменные (по умолчанию 10)




                              - 47 -




                        Л И Т Е Р А Т У Р А



     1. Клоксин У., Меллиш К. Программирование на языке Пролог. -
М.: Мир, 1987.
     2. Логическое программирование: Сб. статей. - М.: Мир, 1987.
     3. Хоггер К. Введение в логическое программирование. - М.: Мир,
1988.
     4. Язык Пролог в пятом поколении ЭВМ: Сб. статей. - М.: Мир,
1988.
