% Сортировка списков
%==============================================

domains
 n=integer
 list=n*

predicates

 insert_sort(list,list)
 insert(n,list,list)
 asc_order(n,n)


goal
  insert_sort([4,7,3,9],S),
  write(S). 
 
clauses
 insert_sort([],[]). %======================> точка1
 
  
  insert_sort([X|Tail],Sort_list):-  %======>точка2
     insert_sort(Tail,Sort_tail),    %======> рекурсивный вызов 
    insert(X,Sort_tail,Sort_list).   %======> точка3
    
  insert(X,[Y|Sort_list],[Y|Sort_list1]):-  %===> точка4
   asc_order(X,Y),!,                        %===> точка5
    insert(X,Sort_list,Sort_list1).         %===> точка6 
      insert(X,Sort_list,[X|Sort_list]).    %===> точка7
   
   asc_order(X,Y):-X>Y.               %===> точка8
  
                            
                           
 
% Комментарий
/*
В точке 2 Tail=[7,3,9] при первом рекрсивном вызове
до тех пор пока список не будет пустым. При этом откат в точку 1 
дает успех и управление передается предикату в точке 3, который начинает работать со стеком.
Управление в точку 4, Неуспех, т.к. переменная  Y не определена
и откат в точку7. X=9    insert(9,[],[9]).
Снова откат в точку 2(т.к. в стеке имеется необработанный предикат, установленный после рекурсивного вызова а затем в точку 3 Х=3 3>9 неуспех и откат в точку 7
 (другое правило с этим же именем предиката)
  Происходит присоединение 3 ко второму списку
  insert(3,[9],[3,9]).    
  insert(7,[3,9],[3,7,9]).    


*/