; Формат данных (Source Destination Length);
;1. отсортируем  Список по значению Length 
;2. Вычеркнем петлевые дуги 
(defun findpaths(Dugs)
 (setq Rez1 (list (first(car Dugs)) (second(car Dugs)) ))
 (setq Dugs (cdr Dugs))
 (DoTimes (1-(list-length Dugs))
  (DoList (elem1 Dugs)
   (if (find (first elem1) Rez1) (setq rez1 (cons (second elem1) rez1)))
   (if (find (second elem1) Rez1) (setq rez1 (cons (first elem1) rez1)))
  )
 )
 (setq rez1 (remove-duplicates rez1))
 (setq findpaths (list-length rez1))
)   

(defun main()
 (setq Dug (list (1 2 3)  (1 5 5)  (1 4 1)  (5 2 2)  (3 2 2)  (6 2 3)  (3 6 3)  (4 6 5)  (4 7 6)  (3 4 4)  (5 6 1)  (6 7 2)  (5 8 1)  (6 8 3)  (7 8 7))) 
 (defconstant NP 8 "Колво отчек")
 (cls)
 (princ "Начальные данные ")(princ Dug) (terpri)
 (setq Rez (list))
 (DoTimes (1-(List-Length Dug))
  (setq z (car Dug))
  (dolist (tst Dug)
   (if (> (third z) (third tst)) 
    (setq z tst)
   )
  )
  (setq Rez (cons z Rez)) 
  (setq Dug (delete z Dug))
 )
 (princ "Отсортировали:") (princ rez) (terpri)
 (SetQ Ans (list))
 (DoTimes (1-(List-Length Rez))
  (if (= (FindPaths (append Ans (cdr Rez))) NP) 
   ()
   (setq Ans (cons (car Rez) Ans))
  )
  (SetQ rez (cdr rez))
 ) 
 (princ "Результат ")(princ Ans)(TERPRI)
 (Defvar Sum 0 "Общая длина")
 (Setq sum 0)
 (DoList (elem Ans)
  (Setq sum (+ sum (third elem)))
 )
 (princ "Общая длина ")(princ sum)(terpri)
