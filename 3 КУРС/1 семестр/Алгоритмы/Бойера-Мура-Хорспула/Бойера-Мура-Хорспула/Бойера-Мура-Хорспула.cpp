// Бойера-Мура-Хорспула.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <algorithm>
#include <clocale>
using namespace std;

// Функция предварительной обработки для плохих символов Бойера Мура
void badCharCheck(string str, int size,
	int badchar[256])
{
	int i;
	// инициализация всех вхождения как -1
	for (i = 0; i < 256; i++)
		badchar[i] = -1;
	//заполнение фактических значений последнего появления символа
	for (i = 0; i < size; i++)
		badchar[(int)str[i]] = i;
}

// Функция поиска шаблонов, использующая исходя из плохих символов алгоритма Бойера Мура.
void search(string txt, string pat)
{
	int m = pat.size();
	int n = txt.size();
	int badchar[256];
	//заполнение массива неверных символов, с помощью предварительной обработки
	badCharCheck(pat, m, badchar);
	int s = 0; //s - сдвиг шаблона относительно текста
	while (s <= (n - m))
	{
		int j = m - 1;

		// уменьшение индекса j шаблона, пока символы шаблона и текста не будут соответствовать s 

		while (j >= 0 && pat[j] == txt[s + j])
			j--;
		// Если шаблон присутствует в текущем сдвиге, то индекс j станет -1 после
		if (j < 0)
		{
			cout << "Вхождение найдено с индексом: " << s << endl;
			//сдвиг паттерна так, чтобы следующий символ в тексте выравнялся с последним появлением его в образце.
			s += (s + m < n) ? m - badchar[txt[s + m]] : 1;
		}
		else
			/*сдвиг для проверки плохого символа что бы совпадал с последним входением в шаблоне
			Функция max для проверки положитльного сдвига
			Получение отрицательного сдвига возможно, если последнее появление плохого символа в шаблоне
			находится справа от текущего символа. */
			s += max(1, j - badchar[txt[s + j]]);
	}
}

int main()
{
	setlocale(0, "");
	string txt = "ABAAABCD";
	string pat = "ABC";
	search(txt, pat);
	return 0;
}


